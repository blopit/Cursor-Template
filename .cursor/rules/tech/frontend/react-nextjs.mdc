---
description: Guidelines for React and Next.js development
globs: **/*.{js,jsx,ts,tsx}
version: 1.0.0
author: Cursor AI
tags: react, nextjs, frontend, javascript, typescript
---

# React and Next.js Development Guidelines

This document defines guidelines for developing applications using React and Next.js, covering best practices, architecture patterns, performance optimization, and common pitfalls.

## Project Structure

### Next.js App Router Structure

```
src/
├── app/                  # App Router
│   ├── (auth)/           # Route group for authentication
│   │   ├── login/        # Login route
│   │   │   ├── page.tsx  # Login page component
│   │   │   └── actions.ts # Server actions for login
│   │   └── register/     # Register route
│   ├── api/              # API routes
│   │   └── [...]         # API route handlers
│   ├── dashboard/        # Dashboard route
│   │   ├── layout.tsx    # Dashboard layout
│   │   ├── page.tsx      # Dashboard page component
│   │   └── loading.tsx   # Loading UI
│   ├── layout.tsx        # Root layout
│   ├── page.tsx          # Home page
│   └── globals.css       # Global styles
├── components/           # Shared components
│   ├── ui/               # UI components
│   │   ├── button.tsx    # Button component
│   │   └── [...]         # Other UI components
│   └── features/         # Feature-specific components
│       ├── auth/         # Authentication components
│       └── [...]         # Other feature components
├── lib/                  # Utility functions and libraries
│   ├── utils.ts          # General utilities
│   └── [...]             # Other utility files
├── hooks/                # Custom React hooks
│   ├── use-auth.ts       # Authentication hook
│   └── [...]             # Other hooks
├── types/                # TypeScript type definitions
│   └── index.ts          # Type exports
└── styles/               # Component styles
    └── [...]             # Style files
```

### Next.js Pages Router Structure (Legacy)

```
src/
├── pages/                # Pages Router
│   ├── _app.tsx          # Custom App component
│   ├── _document.tsx     # Custom Document component
│   ├── index.tsx         # Home page
│   ├── dashboard.tsx     # Dashboard page
│   └── api/              # API routes
│       └── [...]         # API route handlers
├── components/           # Shared components
├── lib/                  # Utility functions and libraries
├── hooks/                # Custom React hooks
├── types/                # TypeScript type definitions
└── styles/               # Component styles
```

## Component Architecture

### Component Organization

1. **Atomic Design Methodology**:
   - **Atoms**: Basic UI elements (Button, Input, Text)
   - **Molecules**: Simple component combinations (SearchBar, FormField)
   - **Organisms**: Complex UI sections (Header, UserProfile)
   - **Templates**: Page layouts without specific content
   - **Pages**: Complete pages with actual content

2. **Feature-Based Organization**:
   - Group components by feature or domain
   - Include all related components, hooks, and utilities

### Component Best Practices

#### Functional Components

```tsx
// Good: Functional component with TypeScript
import { useState, useEffect } from 'react';

interface UserProfileProps {
  userId: string;
  showStats?: boolean;
}

export function UserProfile({ userId, showStats = false }: UserProfileProps) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    async function fetchUser() {
      try {
        setLoading(true);
        const data = await fetchUserData(userId);
        setUser(data);
      } catch (error) {
        console.error('Failed to fetch user:', error);
      } finally {
        setLoading(false);
      }
    }
    
    fetchUser();
  }, [userId]);
  
  if (loading) return <Spinner />;
  if (!user) return <ErrorMessage message="User not found" />;
  
  return (
    <div className="user-profile">
      <h2>{user.name}</h2>
      <p>{user.email}</p>
      {showStats && <UserStats userId={userId} />}
    </div>
  );
}
```

#### Component Composition

```tsx
// Good: Component composition
function Dashboard() {
  return (
    <DashboardLayout>
      <Header>
        <SearchBar />
        <UserMenu />
      </Header>
      <Sidebar>
        <Navigation />
      </Sidebar>
      <MainContent>
        <DashboardSummary />
        <RecentActivity />
      </MainContent>
    </DashboardLayout>
  );
}
```

#### Custom Hooks

```tsx
// Good: Custom hook for form handling
function useForm<T>(initialValues: T) {
  const [values, setValues] = useState<T>(initialValues);
  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});
  const [touched, setTouched] = useState<Partial<Record<keyof T, boolean>>>({});
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setValues({ ...values, [name]: value });
  };
  
  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    const { name } = e.target;
    setTouched({ ...touched, [name]: true });
  };
  
  const reset = () => {
    setValues(initialValues);
    setErrors({});
    setTouched({});
  };
  
  return {
    values,
    errors,
    touched,
    handleChange,
    handleBlur,
    reset,
    setValues,
    setErrors,
  };
}

// Usage
function LoginForm() {
  const { values, handleChange, handleBlur, errors } = useForm({
    email: '',
    password: '',
  });
  
  // Form implementation
}
```

## State Management

### Local State

```tsx
// Use useState for component-level state
function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
```

### Context API

```tsx
// Create a context
import { createContext, useContext, useState, ReactNode } from 'react';

interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Provider component
export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  
  const login = async (email: string, password: string) => {
    // Login implementation
    const userData = await loginUser(email, password);
    setUser(userData);
  };
  
  const logout = () => {
    // Logout implementation
    setUser(null);
  };
  
  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

// Custom hook to use the context
export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
```

### External State Management

```tsx
// Redux Toolkit example
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface CounterState {
  value: number;
}

const initialState: CounterState = {
  value: 0,
};

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export default counterSlice.reducer;
```

## Data Fetching

### Client-Side Data Fetching

```tsx
// Using React Query
import { useQuery } from '@tanstack/react-query';

function UserList() {
  const { data, isLoading, error } = useQuery({
    queryKey: ['users'],
    queryFn: fetchUsers,
  });
  
  if (isLoading) return <Spinner />;
  if (error) return <ErrorMessage error={error} />;
  
  return (
    <ul>
      {data.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
}
```

### Server-Side Data Fetching (Next.js)

```tsx
// App Router: Server Component
export default async function UserPage({ params }: { params: { id: string } }) {
  const user = await fetchUser(params.id);
  
  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
}

// Pages Router: getServerSideProps
export async function getServerSideProps(context) {
  const { id } = context.params;
  const user = await fetchUser(id);
  
  return {
    props: {
      user,
    },
  };
}
```

### API Routes (Next.js)

```tsx
// App Router: Route Handler
import { NextResponse } from 'next/server';

export async function GET(request: Request) {
  const users = await fetchUsers();
  return NextResponse.json(users);
}

export async function POST(request: Request) {
  const data = await request.json();
  const newUser = await createUser(data);
  return NextResponse.json(newUser, { status: 201 });
}

// Pages Router: API Route
export default async function handler(req, res) {
  if (req.method === 'GET') {
    const users = await fetchUsers();
    res.status(200).json(users);
  } else if (req.method === 'POST') {
    const newUser = await createUser(req.body);
    res.status(201).json(newUser);
  } else {
    res.setHeader('Allow', ['GET', 'POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
```

## Styling Approaches

### CSS Modules

```tsx
// styles/Button.module.css
.button {
  padding: 8px 16px;
  border-radius: 4px;
  font-weight: 600;
}

.primary {
  background-color: #0070f3;
  color: white;
}

// Button.tsx
import styles from './Button.module.css';

interface ButtonProps {
  variant?: 'primary' | 'secondary';
  children: React.ReactNode;
  onClick?: () => void;
}

export function Button({ 
  variant = 'primary', 
  children, 
  onClick 
}: ButtonProps) {
  return (
    <button 
      className={`${styles.button} ${styles[variant]}`}
      onClick={onClick}
    >
      {children}
    </button>
  );
}
```

### Tailwind CSS

```tsx
// Button.tsx with Tailwind
interface ButtonProps {
  variant?: 'primary' | 'secondary';
  children: React.ReactNode;
  onClick?: () => void;
}

export function Button({ 
  variant = 'primary', 
  children, 
  onClick 
}: ButtonProps) {
  const baseClasses = 'px-4 py-2 rounded font-semibold';
  const variantClasses = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300',
  };
  
  return (
    <button 
      className={`${baseClasses} ${variantClasses[variant]}`}
      onClick={onClick}
    >
      {children}
    </button>
  );
}
```

### CSS-in-JS (Styled Components)

```tsx
// Button.tsx with styled-components
import styled from 'styled-components';

const StyledButton = styled.button<{ variant: 'primary' | 'secondary' }>`
  padding: 8px 16px;
  border-radius: 4px;
  font-weight: 600;
  
  ${props => props.variant === 'primary' && `
    background-color: #0070f3;
    color: white;
    
    &:hover {
      background-color: #0060df;
    }
  `}
  
  ${props => props.variant === 'secondary' && `
    background-color: #f1f1f1;
    color: #333;
    
    &:hover {
      background-color: #e1e1e1;
    }
  `}
`;

interface ButtonProps {
  variant?: 'primary' | 'secondary';
  children: React.ReactNode;
  onClick?: () => void;
}

export function Button({ 
  variant = 'primary', 
  children, 
  onClick 
}: ButtonProps) {
  return (
    <StyledButton 
      variant={variant}
      onClick={onClick}
    >
      {children}
    </StyledButton>
  );
}
```

## Performance Optimization

### Code Splitting

```tsx
// Dynamic import with Next.js
import dynamic from 'next/dynamic';

const DynamicChart = dynamic(() => import('../components/Chart'), {
  loading: () => <p>Loading chart...</p>,
  ssr: false, // Disable server-side rendering if needed
});

function Dashboard() {
  return (
    <div>
      <h1>Dashboard</h1>
      <DynamicChart data={chartData} />
    </div>
  );
}
```

### Memoization

```tsx
// Using React.memo
import { memo } from 'react';

interface UserListItemProps {
  user: User;
  onSelect: (userId: string) => void;
}

const UserListItem = memo(function UserListItem({ 
  user, 
  onSelect 
}: UserListItemProps) {
  return (
    <li onClick={() => onSelect(user.id)}>
      <img src={user.avatar} alt={user.name} />
      <div>
        <h3>{user.name}</h3>
        <p>{user.email}</p>
      </div>
    </li>
  );
});

// Using useMemo and useCallback
import { useMemo, useCallback } from 'react';

function UserList({ users, onUserSelect }) {
  // Memoize expensive calculations
  const sortedUsers = useMemo(() => {
    return [...users].sort((a, b) => a.name.localeCompare(b.name));
  }, [users]);
  
  // Memoize callback functions
  const handleSelect = useCallback((userId: string) => {
    onUserSelect(userId);
  }, [onUserSelect]);
  
  return (
    <ul>
      {sortedUsers.map((user) => (
        <UserListItem 
          key={user.id} 
          user={user} 
          onSelect={handleSelect} 
        />
      ))}
    </ul>
  );
}
```

### Image Optimization (Next.js)

```tsx
// Using Next.js Image component
import Image from 'next/image';

function ProfileCard({ user }) {
  return (
    <div className="profile-card">
      <Image
        src={user.avatar}
        alt={user.name}
        width={64}
        height={64}
        priority={false}
        placeholder="blur"
        blurDataURL="data:image/png;base64,..."
      />
      <h3>{user.name}</h3>
    </div>
  );
}
```

## Testing

### Component Testing

```tsx
// Using React Testing Library
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './Button';

describe('Button', () => {
  it('renders correctly', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });
  
  it('calls onClick when clicked', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    fireEvent.click(screen.getByText('Click me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
  
  it('applies the correct class for primary variant', () => {
    render(<Button variant="primary">Primary</Button>);
    const button = screen.getByText('Primary');
    expect(button).toHaveClass('primary');
  });
});
```

### Integration Testing

```tsx
// Testing a form submission
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { LoginForm } from './LoginForm';

// Mock the API call
jest.mock('../api/auth', () => ({
  login: jest.fn(() => Promise.resolve({ success: true })),
}));

describe('LoginForm', () => {
  it('submits the form with user credentials', async () => {
    const mockLogin = require('../api/auth').login;
    const onSuccess = jest.fn();
    
    render(<LoginForm onSuccess={onSuccess} />);
    
    // Fill out the form
    fireEvent.change(screen.getByLabelText(/email/i), {
      target: { value: 'user@example.com' },
    });
    
    fireEvent.change(screen.getByLabelText(/password/i), {
      target: { value: 'password123' },
    });
    
    // Submit the form
    fireEvent.click(screen.getByRole('button', { name: /log in/i }));
    
    // Wait for the API call to complete
    await waitFor(() => {
      expect(mockLogin).toHaveBeenCalledWith({
        email: 'user@example.com',
        password: 'password123',
      });
      expect(onSuccess).toHaveBeenCalled();
    });
  });
});
```

## Accessibility

### Keyboard Navigation

```tsx
// Ensuring keyboard accessibility
function Dropdown({ options, onSelect }) {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedOption, setSelectedOption] = useState(null);
  const dropdownRef = useRef(null);
  
  const handleToggle = () => setIsOpen(!isOpen);
  
  const handleSelect = (option) => {
    setSelectedOption(option);
    onSelect(option);
    setIsOpen(false);
  };
  
  const handleKeyDown = (e) => {
    if (e.key === 'Escape') {
      setIsOpen(false);
    }
  };
  
  return (
    <div 
      className="dropdown" 
      ref={dropdownRef}
      onKeyDown={handleKeyDown}
    >
      <button 
        onClick={handleToggle}
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        {selectedOption ? selectedOption.label : 'Select an option'}
      </button>
      
      {isOpen && (
        <ul role="listbox">
          {options.map((option) => (
            <li 
              key={option.value}
              role="option"
              aria-selected={selectedOption?.value === option.value}
              tabIndex={0}
              onClick={() => handleSelect(option)}
              onKeyDown={(e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                  handleSelect(option);
                }
              }}
            >
              {option.label}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
```

### ARIA Attributes

```tsx
// Using ARIA attributes for accessibility
function Tabs({ tabs }) {
  const [activeTab, setActiveTab] = useState(0);
  
  return (
    <div className="tabs">
      <div role="tablist">
        {tabs.map((tab, index) => (
          <button
            key={index}
            role="tab"
            id={`tab-${index}`}
            aria-selected={activeTab === index}
            aria-controls={`panel-${index}`}
            tabIndex={activeTab === index ? 0 : -1}
            onClick={() => setActiveTab(index)}
          >
            {tab.label}
          </button>
        ))}
      </div>
      
      {tabs.map((tab, index) => (
        <div
          key={index}
          role="tabpanel"
          id={`panel-${index}`}
          aria-labelledby={`tab-${index}`}
          hidden={activeTab !== index}
        >
          {tab.content}
        </div>
      ))}
    </div>
  );
}
```

## SEO (Next.js)

### Metadata

```tsx
// App Router: Metadata
import { Metadata } from 'next';

export const metadata: Metadata = {
  title: 'Product Page',
  description: 'View our latest products',
  openGraph: {
    title: 'Product Page',
    description: 'View our latest products',
    images: [
      {
        url: 'https://example.com/og-image.jpg',
        width: 1200,
        height: 630,
        alt: 'Product showcase',
      },
    ],
  },
};

export default function ProductPage() {
  return (
    // Page content
  );
}

// Pages Router: Head component
import Head from 'next/head';

function ProductPage({ product }) {
  return (
    <>
      <Head>
        <title>{product.name} | My Store</title>
        <meta name="description" content={product.description} />
        <meta property="og:title" content={product.name} />
        <meta property="og:description" content={product.description} />
        <meta property="og:image" content={product.image} />
      </Head>
      
      {/* Page content */}
    </>
  );
}
```

## Error Handling

### Error Boundaries

```tsx
// Custom error boundary component
import { Component, ErrorInfo, ReactNode } from 'react';

interface ErrorBoundaryProps {
  fallback?: ReactNode;
  children: ReactNode;
  onError?: (error: Error, errorInfo: ErrorInfo) => void;
}

interface ErrorBoundaryState {
  hasError: boolean;
}

class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(_: Error): ErrorBoundaryState {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught by ErrorBoundary:', error, errorInfo);
    this.props.onError?.(error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || <div>Something went wrong.</div>;
    }

    return this.props.children;
  }
}

// Usage
function App() {
  return (
    <ErrorBoundary
      fallback={<ErrorPage />}
      onError={(error, errorInfo) => {
        // Log to error reporting service
        logError(error, errorInfo);
      }}
    >
      <MyComponent />
    </ErrorBoundary>
  );
}
```

### Next.js Error Handling

```tsx
// App Router: Error component
'use client';

import { useEffect } from 'react';

interface ErrorComponentProps {
  error: Error;
  reset: () => void;
}

export default function Error({ error, reset }: ErrorComponentProps) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error);
  }, [error]);

  return (
    <div className="error-container">
      <h2>Something went wrong!</h2>
      <p>{error.message}</p>
      <button onClick={reset}>Try again</button>
    </div>
  );
}

// Pages Router: Custom error page
// pages/_error.js
function Error({ statusCode }) {
  return (
    <div>
      <h1>Error {statusCode}</h1>
      <p>
        {statusCode
          ? `An error ${statusCode} occurred on server`
          : 'An error occurred on client'}
      </p>
    </div>
  );
}

Error.getInitialProps = ({ res, err }) => {
  const statusCode = res ? res.statusCode : err ? err.statusCode : 404;
  return { statusCode };
};

export default Error;
```

## Common Pitfalls

1. **Prop Drilling**: Passing props through multiple component levels
   - Solution: Use Context API or state management libraries

2. **Unnecessary Re-renders**: Components re-rendering when they don't need to
   - Solution: Use memoization (React.memo, useMemo, useCallback)

3. **Memory Leaks**: Not cleaning up effects and subscriptions
   - Solution: Return cleanup functions from useEffect

4. **Excessive API Calls**: Making too many API calls
   - Solution: Use caching and debouncing

5. **Large Bundle Sizes**: Including too many dependencies
   - Solution: Use code splitting and tree shaking

6. **Poor TypeScript Usage**: Not leveraging TypeScript effectively
   - Solution: Use proper typing and avoid `any`

7. **Accessibility Issues**: Not making components accessible
   - Solution: Follow WCAG guidelines and use ARIA attributes

## Best Practices

1. **Keep Components Small**: Focus on single responsibility
2. **Use TypeScript**: For better type safety and developer experience
3. **Follow Naming Conventions**: Use descriptive names for components and functions
4. **Optimize Rendering**: Minimize unnecessary re-renders
5. **Handle Errors Gracefully**: Use error boundaries and proper error handling
6. **Write Tests**: Cover components with unit and integration tests
7. **Document Components**: Use JSDoc or Storybook for documentation
8. **Follow Accessibility Guidelines**: Make your app usable by everyone
9. **Use ESLint and Prettier**: For consistent code style
10. **Keep Dependencies Updated**: Regularly update dependencies for security and features

## Related Rules

- [typescript/style](../../typescript/style.mdc): TypeScript coding standards
- [stack/stack-definition](../../stack/stack-definition.mdc): Technology stack definition
- [patterns/error-handling](../../patterns/error-handling.mdc): Error handling guidelines

## References

- [React Documentation](https://react.dev/)
- [Next.js Documentation](https://nextjs.org/docs)
- [React TypeScript Cheatsheet](https://react-typescript-cheatsheet.netlify.app/)
- [React Patterns](https://reactpatterns.com/)

## Changelog

- 1.0.0: Initial version 