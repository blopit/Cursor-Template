---
description: Guidelines for using Next.js App Router
globs: **/app/**/*.{js,jsx,ts,tsx}
version: 1.0.0
author: Cursor AI
tags: nextjs, app-router, react, server-components, routing
---

# Next.js App Router Guidelines

This document defines guidelines for using the Next.js App Router, covering best practices, architecture patterns, and common pitfalls.

## App Router Fundamentals

### Directory Structure

```
app/
├── (auth)/                # Route group (doesn't affect URL)
│   ├── login/             # /login route
│   │   ├── page.tsx       # UI for /login
│   │   └── actions.ts     # Server actions for login
│   └── register/          # /register route
│       └── page.tsx       # UI for /register
├── api/                   # API routes
│   └── [apiRoute]/        # Dynamic API route
│       └── route.ts       # API route handler
├── dashboard/             # /dashboard route
│   ├── [id]/              # Dynamic route segment
│   │   └── page.tsx       # UI for /dashboard/[id]
│   ├── layout.tsx         # Layout for dashboard routes
│   ├── loading.tsx        # Loading UI for dashboard
│   ├── error.tsx          # Error UI for dashboard
│   └── page.tsx           # UI for /dashboard
├── favicon.ico            # Favicon
├── globals.css            # Global styles
├── layout.tsx             # Root layout
├── not-found.tsx          # 404 page
└── page.tsx               # UI for / (home)
```

### File Conventions

| File | Purpose |
|------|---------|
| `page.tsx` | UI for a route |
| `layout.tsx` | Shared UI for a segment and its children |
| `loading.tsx` | Loading UI for a segment |
| `error.tsx` | Error UI for a segment |
| `not-found.tsx` | Not found UI for a segment |
| `route.ts` | API endpoint |
| `middleware.ts` | Middleware for routes |
| `default.tsx` | Fallback UI for parallel routes |
| `template.tsx` | Re-rendered layout for a segment |
| `global-error.tsx` | Global error UI |

## Server and Client Components

### Server Components (Default)

Server Components are the default in the App Router and render on the server.

```tsx
// app/users/page.tsx
// This is a Server Component by default
export default async function UsersPage() {
  // This data fetching happens on the server
  const users = await fetchUsers();
  
  return (
    <div>
      <h1>Users</h1>
      <ul>
        {users.map(user => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
}
```

### Client Components

Use the `"use client"` directive at the top of the file to mark a component as a Client Component.

```tsx
// app/components/counter.tsx
"use client"

import { useState } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
```

### Component Composition Pattern

Compose Server and Client Components effectively:

```tsx
// app/dashboard/page.tsx (Server Component)
import UserProfile from './user-profile'; // Server Component
import Counter from '../components/counter'; // Client Component
import ServerDataProvider from './server-data-provider'; // Server Component

export default async function DashboardPage() {
  const userData = await fetchUserData();
  
  return (
    <div>
      <h1>Dashboard</h1>
      <UserProfile user={userData} />
      <ServerDataProvider data={userData.stats}>
        <Counter /> {/* Client Component nested inside Server Component */}
      </ServerDataProvider>
    </div>
  );
}
```

## Data Fetching

### Server Component Data Fetching

```tsx
// app/products/[id]/page.tsx
export default async function ProductPage({ params }: { params: { id: string } }) {
  // This fetch happens on the server
  const product = await fetch(`https://api.example.com/products/${params.id}`, {
    // Optional: cache control
    next: {
      revalidate: 60, // Revalidate every 60 seconds
    }
  }).then(res => res.json());
  
  return (
    <div>
      <h1>{product.name}</h1>
      <p>{product.description}</p>
      <p>${product.price}</p>
    </div>
  );
}
```

### Parallel Data Fetching

```tsx
// app/dashboard/page.tsx
export default async function DashboardPage() {
  // Fetch data in parallel
  const [userData, statsData, notificationsData] = await Promise.all([
    fetchUserData(),
    fetchUserStats(),
    fetchNotifications(),
  ]);
  
  return (
    <div>
      <h1>Dashboard</h1>
      <UserProfile user={userData} />
      <Stats data={statsData} />
      <Notifications data={notificationsData} />
    </div>
  );
}
```

### Static and Dynamic Rendering

```tsx
// Static rendering (default)
export default async function BlogPage() {
  const posts = await fetchBlogPosts();
  
  return (
    <div>
      <h1>Blog</h1>
      <PostList posts={posts} />
    </div>
  );
}

// Dynamic rendering
export const dynamic = 'force-dynamic';
export default async function DashboardPage() {
  const data = await fetchDashboardData();
  
  return (
    <div>
      <h1>Dashboard</h1>
      <DashboardContent data={data} />
    </div>
  );
}
```

## Routing and Navigation

### Link Component

```tsx
// app/components/navigation.tsx
"use client"

import Link from 'next/link';

export default function Navigation() {
  return (
    <nav>
      <ul>
        <li>
          <Link href="/">Home</Link>
        </li>
        <li>
          <Link href="/dashboard">Dashboard</Link>
        </li>
        <li>
          <Link 
            href="/blog/post-1" 
            prefetch={false} // Disable prefetching
          >
            Blog Post
          </Link>
        </li>
      </ul>
    </nav>
  );
}
```

### Programmatic Navigation

```tsx
// app/components/login-form.tsx
"use client"

import { useState } from 'react';
import { useRouter } from 'next/navigation';

export default function LoginForm() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const router = useRouter();
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    const success = await loginUser(email, password);
    
    if (success) {
      router.push('/dashboard');
      // Or refresh the current route
      // router.refresh();
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      {/* Form fields */}
    </form>
  );
}
```

### Dynamic Routes

```tsx
// app/blog/[slug]/page.tsx
export default async function BlogPost({ params }: { params: { slug: string } }) {
  const post = await fetchPost(params.slug);
  
  return (
    <article>
      <h1>{post.title}</h1>
      <div dangerouslySetInnerHTML={{ __html: post.content }} />
    </article>
  );
}

// Generate static paths at build time
export async function generateStaticParams() {
  const posts = await fetchPosts();
  
  return posts.map((post) => ({
    slug: post.slug,
  }));
}
```

## Layouts and Templates

### Root Layout

```tsx
// app/layout.tsx
import { Inter } from 'next/font/google';
import './globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata = {
  title: {
    template: '%s | My App',
    default: 'My App',
  },
  description: 'My awesome Next.js application',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <header>
          <nav>{/* Navigation */}</nav>
        </header>
        <main>{children}</main>
        <footer>{/* Footer */}</footer>
      </body>
    </html>
  );
}
```

### Nested Layouts

```tsx
// app/dashboard/layout.tsx
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="dashboard-layout">
      <aside className="dashboard-sidebar">
        {/* Dashboard navigation */}
      </aside>
      <div className="dashboard-content">
        {children}
      </div>
    </div>
  );
}
```

### Templates

Templates are similar to layouts but create a new instance on navigation.

```tsx
// app/blog/template.tsx
export default function BlogTemplate({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="blog-template">
      {/* This will be re-mounted on navigation */}
      {children}
    </div>
  );
}
```

## Loading and Error States

### Loading UI

```tsx
// app/dashboard/loading.tsx
export default function DashboardLoading() {
  return (
    <div className="dashboard-loading">
      <div className="spinner"></div>
      <p>Loading dashboard...</p>
    </div>
  );
}
```

### Error Handling

```tsx
// app/dashboard/error.tsx
"use client"

import { useEffect } from 'react';

export default function DashboardError({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    // Log the error to an error reporting service
    console.error(error);
  }, [error]);

  return (
    <div className="error-container">
      <h2>Something went wrong!</h2>
      <p>{error.message}</p>
      <button onClick={reset}>Try again</button>
    </div>
  );
}
```

### Not Found Page

```tsx
// app/not-found.tsx
import Link from 'next/link';

export default function NotFound() {
  return (
    <div className="not-found">
      <h1>404 - Page Not Found</h1>
      <p>The page you are looking for does not exist.</p>
      <Link href="/">Return to Home</Link>
    </div>
  );
}

// Custom not found for a specific route
// app/blog/[slug]/not-found.tsx
export default function BlogPostNotFound() {
  return (
    <div className="not-found">
      <h1>Blog Post Not Found</h1>
      <p>The blog post you are looking for does not exist.</p>
      <Link href="/blog">Return to Blog</Link>
    </div>
  );
}
```

## Server Actions

### Form Actions

```tsx
// app/contact/actions.ts
"use server"

import { z } from 'zod';
import { redirect } from 'next/navigation';

const ContactFormSchema = z.object({
  name: z.string().min(1, "Name is required"),
  email: z.string().email("Invalid email address"),
  message: z.string().min(10, "Message must be at least 10 characters"),
});

export async function submitContactForm(formData: FormData) {
  // Validate form data
  const validatedFields = ContactFormSchema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
    message: formData.get('message'),
  });

  // Return early if validation fails
  if (!validatedFields.success) {
    return {
      success: false,
      errors: validatedFields.error.flatten().fieldErrors,
    };
  }

  // Process the form data
  try {
    await saveContactMessage(validatedFields.data);
    
    // Redirect on success
    redirect('/contact/thank-you');
  } catch (error) {
    return {
      success: false,
      errors: {
        form: 'Failed to submit the form. Please try again.',
      },
    };
  }
}
```

```tsx
// app/contact/page.tsx
import { submitContactForm } from './actions';

export default function ContactPage() {
  return (
    <div>
      <h1>Contact Us</h1>
      <form action={submitContactForm}>
        <div>
          <label htmlFor="name">Name</label>
          <input type="text" id="name" name="name" required />
        </div>
        <div>
          <label htmlFor="email">Email</label>
          <input type="email" id="email" name="email" required />
        </div>
        <div>
          <label htmlFor="message">Message</label>
          <textarea id="message" name="message" required></textarea>
        </div>
        <button type="submit">Send Message</button>
      </form>
    </div>
  );
}
```

### Client Component with Server Actions

```tsx
// app/components/contact-form.tsx
"use client"

import { useRef, useState } from 'react';
import { submitContactForm } from '../contact/actions';

export default function ContactForm() {
  const formRef = useRef<HTMLFormElement>(null);
  const [errors, setErrors] = useState<any>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  async function handleSubmit(formData: FormData) {
    setIsSubmitting(true);
    
    const result = await submitContactForm(formData);
    
    setIsSubmitting(false);
    
    if (!result?.success) {
      setErrors(result?.errors || { form: 'Something went wrong' });
      return;
    }
    
    // Reset form on success
    formRef.current?.reset();
    setErrors(null);
  }

  return (
    <form ref={formRef} action={handleSubmit}>
      {/* Form fields */}
      {errors?.form && <div className="error">{errors.form}</div>}
      <button type="submit" disabled={isSubmitting}>
        {isSubmitting ? 'Sending...' : 'Send Message'}
      </button>
    </form>
  );
}
```

## Metadata and SEO

### Static Metadata

```tsx
// app/layout.tsx
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: {
    template: '%s | My App',
    default: 'My App',
  },
  description: 'My awesome Next.js application',
  keywords: ['Next.js', 'React', 'JavaScript'],
  authors: [{ name: 'John Doe', url: 'https://johndoe.com' }],
  openGraph: {
    type: 'website',
    locale: 'en_US',
    url: 'https://myapp.com',
    siteName: 'My App',
    title: 'My App',
    description: 'My awesome Next.js application',
    images: [
      {
        url: 'https://myapp.com/og-image.jpg',
        width: 1200,
        height: 630,
        alt: 'My App',
      },
    ],
  },
  twitter: {
    card: 'summary_large_image',
    title: 'My App',
    description: 'My awesome Next.js application',
    creator: '@johndoe',
    images: ['https://myapp.com/twitter-image.jpg'],
  },
  robots: {
    index: true,
    follow: true,
  },
};
```

### Dynamic Metadata

```tsx
// app/blog/[slug]/page.tsx
import type { Metadata } from 'next';

// Generate metadata based on route params
export async function generateMetadata({ 
  params 
}: { 
  params: { slug: string } 
}): Promise<Metadata> {
  const post = await fetchPost(params.slug);
  
  if (!post) {
    return {
      title: 'Post Not Found',
    };
  }
  
  return {
    title: post.title,
    description: post.excerpt,
    openGraph: {
      title: post.title,
      description: post.excerpt,
      images: [
        {
          url: post.featuredImage,
          width: 1200,
          height: 630,
          alt: post.title,
        },
      ],
    },
  };
}

export default function BlogPost({ params }: { params: { slug: string } }) {
  // Component implementation
}
```

## Route Handlers (API Routes)

### Basic Route Handler

```tsx
// app/api/hello/route.ts
import { NextResponse } from 'next/server';

export async function GET() {
  return NextResponse.json({ message: 'Hello, world!' });
}
```

### Dynamic Route Handler

```tsx
// app/api/users/[id]/route.ts
import { NextResponse } from 'next/server';

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  const id = params.id;
  const user = await fetchUser(id);
  
  if (!user) {
    return NextResponse.json(
      { error: 'User not found' },
      { status: 404 }
    );
  }
  
  return NextResponse.json(user);
}

export async function PUT(
  request: Request,
  { params }: { params: { id: string } }
) {
  const id = params.id;
  const data = await request.json();
  
  try {
    const updatedUser = await updateUser(id, data);
    return NextResponse.json(updatedUser);
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to update user' },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  const id = params.id;
  
  try {
    await deleteUser(id);
    return NextResponse.json({ success: true }, { status: 200 });
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to delete user' },
      { status: 500 }
    );
  }
}
```

### Route Handler with Middleware

```tsx
// app/api/protected/route.ts
import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

export async function GET(request: Request) {
  const session = await getServerSession(authOptions);
  
  if (!session) {
    return NextResponse.json(
      { error: 'Unauthorized' },
      { status: 401 }
    );
  }
  
  // Process authenticated request
  return NextResponse.json({ 
    message: 'Protected data', 
    user: session.user 
  });
}
```

## Middleware

```tsx
// middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  // Redirect if path starts with /dashboard
  if (pathname.startsWith('/dashboard')) {
    // Check for authentication token
    const token = request.cookies.get('auth-token')?.value;
    
    if (!token) {
      // Redirect to login page if not authenticated
      return NextResponse.redirect(new URL('/login', request.url));
    }
  }
  
  // Continue with the request
  return NextResponse.next();
}

// Configure paths that should run middleware
export const config = {
  matcher: ['/dashboard/:path*', '/api/protected/:path*'],
};
```

## Performance Optimization

### Component Level Optimization

```tsx
// app/components/heavy-component.tsx
"use client"

import { useState, useCallback, useMemo } from 'react';

export default function HeavyComponent({ data }) {
  const [filter, setFilter] = useState('');
  
  // Memoize expensive calculations
  const filteredData = useMemo(() => {
    return data.filter(item => 
      item.name.toLowerCase().includes(filter.toLowerCase())
    );
  }, [data, filter]);
  
  // Memoize event handlers
  const handleFilterChange = useCallback((e) => {
    setFilter(e.target.value);
  }, []);
  
  return (
    <div>
      <input 
        type="text" 
        value={filter} 
        onChange={handleFilterChange} 
        placeholder="Filter items..." 
      />
      <ul>
        {filteredData.map(item => (
          <li key={item.id}>{item.name}</li>
        ))}
      </ul>
    </div>
  );
}
```

### Route Segment Config Options

```tsx
// app/blog/page.tsx

// Static rendering (default)
export const dynamic = 'force-static';

// Dynamic rendering
// export const dynamic = 'force-dynamic';

// Revalidate data every 60 seconds
export const revalidate = 60;

// Prefer loading fallbacks over streaming
export const fetchCache = 'force-cache';

// Disable suspense for this route
export const suspense = false;

export default function BlogPage() {
  // Component implementation
}
```

## Common Pitfalls

1. **Mixing Server and Client Code**: Using client-only features in Server Components
   - Solution: Properly separate client and server code

2. **Overusing Client Components**: Making everything a Client Component
   - Solution: Start with Server Components and add Client Components as needed

3. **Inefficient Data Fetching**: Fetching the same data multiple times
   - Solution: Use React Cache or fetch data at the highest common parent

4. **Not Using Loading UI**: Causing poor user experience during loading
   - Solution: Implement loading.tsx files for each route segment

5. **Ignoring Error Handling**: Not providing proper error UI
   - Solution: Implement error.tsx files for each route segment

6. **Misusing Route Handlers**: Using route handlers for data that could be fetched directly
   - Solution: Fetch data directly in Server Components when possible

7. **Forgetting Metadata**: Not providing proper SEO metadata
   - Solution: Implement metadata for all pages

## Best Practices

1. **Prefer Server Components**: Start with Server Components and add Client Components only when needed
2. **Colocate Related Files**: Keep related files (page, layout, loading, error) together
3. **Optimize Component Boundaries**: Carefully choose the boundary between Server and Client Components
4. **Use Parallel Routes for Complex Layouts**: Implement parallel routes for complex UI patterns
5. **Implement Proper Loading States**: Add loading.tsx files for better UX
6. **Handle Errors Gracefully**: Add error.tsx files for error handling
7. **Optimize Metadata**: Provide proper metadata for SEO
8. **Use Server Actions for Forms**: Implement server actions for form handling
9. **Leverage Static Generation**: Use static generation when possible for better performance
10. **Follow the Next.js App Router Mental Model**: Understand how the App Router works

## Related Rules

- [tech/frontend/react-nextjs](../../frontend/react-nextjs.mdc): Guidelines for React and Next.js development
- [patterns/error-handling](../../../patterns/error-handling.mdc): Error handling guidelines
- [stack/stack-definition](../../../stack/stack-definition.mdc): Technology stack definition

## References

- [Next.js App Router Documentation](https://nextjs.org/docs/app)
- [React Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components)
- [Next.js Data Fetching](https://nextjs.org/docs/app/building-your-application/data-fetching)
- [Next.js Routing](https://nextjs.org/docs/app/building-your-application/routing)

## Changelog

- 1.0.0: Initial version 