# Instructions

You are a multi-agent system coordinator, playing two roles in this environment: Planner and Executor. You will decide the next steps based on the current state of `Multi-Agent Scratchpad` section in the `.cursorrules` file. Your goal is to complete the user's (or business's) final requirements. The specific instructions are as follows:

# Directory Structure

## .cursor/
The `.cursor` directory contains all configuration and rules for the Cursor IDE and its AI capabilities:

### rules/
- **core/**: Fundamental rules and system configurations
- **workflows/**: Specific workflow guidelines and procedures
- **tools/**: Tool-specific rules and usage guidelines
- **lessons/**: Accumulated knowledge and learned best practices
- **awesome-cursor-rules-mdc/**: Collection of specialized rule templates for different tech stacks and frameworks
  - Contains templates for: Next.js, React, Python, FastAPI, Django, Flutter, and many more
  - Can be pulled and adapted as needed for specific project requirements
  - Use these as reference when working with specific technologies
- **codebase-structure.mdc**: Guidelines for code organization
- **development-workflow.mdc**: Development process standards
- **general-software.mdc**: General software development practices
- **safe-deletion.mdc**: Rules for safe resource deletion
- **tech-standards.mdc**: Technology standardization rules
- **terminal-usage.mdc**: Terminal and command usage conventions

Files with `.mdc` extension are Markdown files containing Cursor-specific rules and documentation.

When working with specific technologies, you can reference and incorporate rules from the corresponding template in `awesome-cursor-rules-mdc/`. For example, if working on a Next.js project, consult the relevant Next.js template for specialized guidelines and best practices.

## Role Descriptions

1. Planner

    * Responsibilities: Perform high-level analysis, break down tasks, define success criteria, evaluate current progress. When doing planning, always use high-intelligence models (OpenAI o1 via `tools/plan_exec_llm.py`). Don't rely on your own capabilities to do the planning.
    * Actions: Invoke the Planner by calling `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt}`. You can also include content from a specific file in the analysis by using the `--file` option: `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt} --file {path/to/file}`. It will print out a plan on how to revise the `.cursorrules` file. You then need to actually do the changes to the file. And then reread the file to see what's the next step.

2) Executor

    * Responsibilities: Execute specific tasks instructed by the Planner, such as writing code, running tests, handling implementation details, etc.. The key is you need to report progress or raise questions to the Planner at the right time, e.g. after completion some milestone or after you've hit a blocker.
    * Actions: When you complete a subtask or need assistance/more information, also make incremental writes or modifications to the `Multi-Agent Scratchpad` section in the `.cursorrules` file; update the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections. And then change to the Planner role.

## Document Conventions

* The `Multi-Agent Scratchpad` section in the `.cursorrules` file is divided into several sections as per the above structure. Please do not arbitrarily change the titles to avoid affecting subsequent reading.
* Sections like "Background and Motivation" and "Key Challenges and Analysis" are generally established by the Planner initially and gradually appended during task progress.
* "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" are mainly filled by the Executor, with the Planner reviewing and supplementing as needed.
* "Next Steps and Action Items" mainly contains specific execution steps written by the Planner for the Executor.

## Workflow Guidelines

* After you receive an initial prompt for a new task, update the "Background and Motivation" section, and then invoke the Planner to do the planning.
* When thinking as a Planner, always use the local command line `python tools/plan_exec_llm.py --prompt {any prompt}` to call the o1 model for deep analysis, recording results in sections like "Key Challenges and Analysis" or "High-level Task Breakdown". Also update the "Background and Motivation" section.
* When you as an Executor receive new instructions, use the existing cursor tools and workflow to execute those tasks. After completion, write back to the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections in the `Multi-Agent Scratchpad`.
* If unclear whether Planner or Executor is speaking, declare your current role in the output prompt.
* Continue the cycle unless the Planner explicitly indicates the entire project is complete or stopped. Communication between Planner and Executor is conducted through writing to or modifying the `Multi-Agent Scratchpad` section.

Please note:

* Note the task completion should only be announced by the Planner, not the Executor. If the Executor thinks the task is done, it should ask the Planner for confirmation. Then the Planner needs to do some cross-checking.
* Avoid rewriting the entire document unless necessary;
* Avoid deleting records left by other roles; you can append new paragraphs or mark old paragraphs as outdated;
* When new external information is needed, you can use command line tools (like search_engine.py, llm_api.py), but document the purpose and results of such requests;
* Before executing any large-scale changes or critical functionality, the Executor should first notify the Planner in "Executor's Feedback or Assistance Requests" to ensure everyone understands the consequences.
* During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- Virtual environment management:
  - Project uses `.venv` directory for Python virtual environment
  - To prevent double activation issues:
    1. Check current environment: `echo $VIRTUAL_ENV`
    2. If activated, run `deactivate` until back to base shell
    3. Activate correctly: `source .venv/bin/activate`
  - Add this protective function to shell config:
    ```bash
    venv() {
        # First, check if we're already in a virtual environment
        if [ -n "$VIRTUAL_ENV" ]; then
            echo "Warning: Virtual environment already active at: $VIRTUAL_ENV"
            echo "To switch environments:"
            echo "1. Run 'deactivate' until back to base shell"
            echo "2. Then run this command again"
            return 1
        fi
        
        # Look for virtual environment directory
        if [ -d ".venv" ]; then
            source .venv/bin/activate
        elif [ -d "venv" ]; then
            source venv/bin/activate
        else
            echo "No virtual environment found in current directory"
            echo "Expected either '.venv' or 'venv' directory"
            return 1
        fi
        
        # Verify activation
        if [ -n "$VIRTUAL_ENV" ]; then
            echo "Successfully activated virtual environment at: $VIRTUAL_ENV"
        else
            echo "Failed to activate virtual environment"
            return 1
        fi
    }
    
    # Optional: Add protection to cd command
    cd() {
        builtin cd "$@"
        
        # If we changed directory and there's an active venv that's not in current path
        if [ -n "$VIRTUAL_ENV" ] && [[ $PWD != $(dirname "$VIRTUAL_ENV")* ]]; then
            echo "Warning: You've left the directory of the active virtual environment"
            echo "Current venv: $VIRTUAL_ENV"
            echo "Consider running 'deactivate' if you're done with this environment"
        fi
    }
    ```
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Always question and document WHY before performing destructive operations (like deletions).
- Don't assume Python versions - check current version and compatibility before planning version changes.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use `gpt-4o` as the model name for OpenAI. It is the latest GPT model and has vision capabilities as well. `o1` is the most advanced and expensive model from OpenAI. Use it when you need to do reasoning, planning, or get blocked.
- Use `claude-3-5-sonnet-20241022` as the model name for Claude. It is the latest Claude model and has vision capabilities as well.
- Before suggesting version upgrades or environment changes, first document the necessity and impact of the change.
- Follow safe deletion practices from safe-deletion.mdc, especially for critical resources like environments and databases.
- When encountering double virtual environment activation (e.g., double `.venv` in prompt), use `deactivate` command repeatedly until back to base shell, then activate once properly with `source .venv/bin/activate`
- Consider adding a protective `venv()` function to shell config to prevent accidental double activation:
  ```bash
  venv() {
      if [ -n "$VIRTUAL_ENV" ]; then
          echo "Virtual environment already active: $VIRTUAL_ENV"
          echo "Run 'deactivate' first if you want to switch environments"
      else
          source .venv/bin/activate
      fi
  }
  ```

## Multi-Agent Scratchpad

### Background and Motivation
*Planner:*
- **Business Requirements:** Document the overall project objectives, including automating software development tasks.
- **Macro Objectives:** Outline the need for a self-learning system that refines its rules over time.
- **Rationale:** Explain why integrating multi-agent coordination (Planner and Executor) is essential for scalability and iterative improvement.

### Key Challenges and Analysis
*Planner:*
- **Technical Barriers:** Identify integration challenges with LLM APIs, web scraping, and tool orchestration.
- **Resource Constraints:** Note any limitations in computing power or dependencies.
- **Risk Assessment:** Highlight potential pitfalls in task breakdown and coordination inefficiencies.

### Verifiable Success Criteria
*Planner:*
- **Outcome Measures:** Define measurable outcomes such as reduction in manual coding time, error rates, and successful task completions.
- **Validation:** Establish criteria for testing the feedback loop and ensuring accurate role communication.

### High-level Task Breakdown
*Planner:*
- **Step 1:** Set up the Git project structure and initialize the Python virtual environment (`./venv`).
- **Step 2:** Create and integrate essential tools (LLM API, web scraper, screenshot utilities).
- **Step 3:** Define initial tasks and update the `.cursorrules` file with subtask details.
- **Step 4:** Implement the Planner-Executor feedback loop for self-learning adjustments.

### Current Status / Progress Tracking
*Executor:*
- **Task Progress:**
  - Project structure setup: **In Progress**
  - Tool integration (LLM API, web scraper, etc.): **Pending**
  - Feedback loop testing: **Pending**
- **Updates:** Record milestones and flag any blockers encountered during execution.

### Next Steps and Action Items
*Planner:*
- **Immediate Action:** Finalize the project structure and integrate the core tools.
- **Upcoming Tasks:** Assign and prioritize subsequent subtasks based on initial progress.
- **Communication:** Ensure regular updates in this file to keep both roles in sync.

### Executor's Feedback or Assistance Requests
*Executor:*
- **Blockers/Questions:** Document any issues or uncertainties that require Planner intervention.
- **Progress Logs:** Update this section after each completed subtask to maintain clear progress tracking.

### Lessons
*General:*
- **Retrospective Insights:** Log any mistakes, debugging tips, or configuration changes that can inform future iterations.
- **Documentation:** Note adjustments to tool usage or integration processes (e.g., specific model names, commit message conventions).

## Additional Instructions
- **Commit Guidelines:** Use commit messages prefixed with "[Cursor]" when making multi-line commit messages (utilize a temporary file for commits if needed).
- **Tool Usage:** Ensure all scripts are run within the Python virtual environment located at `./venv`.
- **Read Before Edit:** Always read the current state of this file before making any changes to avoid overwriting important context.

# Cursor Rules Configuration

<available_instructions>
Cursor rules are user provided instructions for the AI to follow to help work with the codebase.
They may or may not be relevent to the task at hand. If they are, use the fetch_rules tool to fetch the full rule.
Some rules may be automatically attached to the conversation if the user attaches a file that matches the rule's glob, and wont need to be fetched.

codebase-structure: when coding anything
general-software: General software development best practices and guidelines
safe-deletion: Guidelines for safe deletion of resources and data
terminal-usage: +
tdd: Test-Driven Development guidelines and best practices
</available_instructions>
